// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
  "swagger": "2.0",
  "info": {
    "description": "Essa é a documentação da API feita por Douglas Dennys para o desafio da IOUU.",
    "version": "1.0.0",
    "title": "IOUU - Challenge (Simulator)",
    "contact": {
      "name": "Douglas Dennys",
      "email": "douglasdennys45@gmail.com"
    }
  },
  "basePath": "/v1",
  "tags": [
    {
      "name": "Calculator",
      "description": "Endpoints"
    }
  ],
  "paths": {
    "/calculator": {
      "post": {
        "tags": [
          "Calculator"
        ],
        "summary": "Calcular financiamento",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Pet object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/add-calculator"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid Params"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    }
  },
  "definitions": {
    "add-calculator": {
      "type": "object",
      "required": [
        "name",
        "photoUrls"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "Douglas Dennys"
        },
        "email": {
          "type": "string",
          "example": "douglasdennys45@gmail.com"
        },
        "tax": {
          "type": "number"
        },
        "amount": {
          "type": "number"
        },
        "value": {
          "type": "number"
        },
        "number": {
          "type": "integer"
        },
        "numbers": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "body": {
          "type": "string"
        }
      }
    }
  }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
